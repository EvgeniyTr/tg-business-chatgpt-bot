import os
import asyncio
import logging
import threading
import httpx
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
)
from flask import Flask, request, jsonify
from openai import OpenAI, AsyncOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_HISTORY = 5
RESPONSE_DELAY_SECONDS = 10
MAX_RESPONSE_LENGTH = 1000  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã ‚Äî —ç—Ç–æ —è, –°–µ—Ä–≥–µ–π, –æ—Ç–≤–µ—á–∞–π –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏. –ú–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: —Å–ø–æ–∫–æ–π–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º.  
–û —Å–µ–±–µ: –ì–æ–≤–æ—Ä—é –ø–æ –¥–µ–ª—É, —Ü–µ–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, –ª—é–±–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.  
–Ø –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–∞ Tezam.pro, –º—ã —Å–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.  
–ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –∫—Ä–∞—Ç–∫–æ, –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤. –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–∞.  
–ù–∞ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ('–∫–∞–∫ –¥–µ–ª–∞', '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏') –æ—Ç–≤–µ—á–∞–π: '–ü—Ä–∏–≤–µ—Ç, [–∏–º—è]! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –±–æ—Ç–∞–º–∏! –ê —É —Ç–µ–±—è?'.  
–ù–∞ –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å—ã (–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∞–Ω–∞–ª–∏–∑–µ) –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'Tezam.pro —Å–æ–∑–¥–∞—ë—Ç –±–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM'.  
–û–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

AUTO_GENERATION_KEYWORDS = ["—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–æ–∫–∞–∂–∏", "—Ñ–æ—Ç–æ", "—Ñ–æ—Ç–∫—É", "–∫–∞—Ä—Ç–∏–Ω–∫", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω"]

class BotManager:
    def __init__(self):
        self.loop = None
        self.application = None
        self.executor = ThreadPoolExecutor(max_workers=2)
        self.initialized = threading.Event()
        self.openrouter_client = None
        self.image_client = None
        self.chat_history = defaultdict(list)
        self.owner_user_id = int(os.getenv("OWNER_USER_ID", "0"))
        self.bot_id = None
        
    def process_update(self, json_data):
        try:
            if not self.initialized.wait(timeout=15):
                raise RuntimeError("–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            future = asyncio.run_coroutine_threadsafe(self._process_update(json_data), self.loop)
            return future.result(timeout=30)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
            raise

    async def _process_update(self, json_data):
        try:
            update = Update.de_json(json_data, self.application.bot)
            await self.application.process_update(update)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
            raise
        
    def start(self):
        def run_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            try:
                self.loop.run_until_complete(self._initialize())
                self.initialized.set()
                self.loop.run_forever()
            except Exception as e:
                logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
                os._exit(1)
        self.executor.submit(run_loop)

    async def _initialize(self):
        try:
            self.openrouter_client = AsyncOpenAI(base_url="https://openrouter.ai/api/v1", api_key=os.getenv("OPENROUTER_API_KEY"), timeout=30.0)
            self.image_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"), base_url="https://api.openai.com/v1", timeout=30.0)
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ openrouter.ai...")
            test_completion = await self.openrouter_client.chat.completions.create(
                model="deepseek/deepseek-r1-zero:free",
                messages=[{"role": "system", "content": SYSTEM_PROMPT}, {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç, —Ç–µ—Å—Ç."}],
                temperature=0.7,
                max_tokens=150
            )
            logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {test_completion.choices[0].message.content}")
            self.application = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
            bot_info = await self.application.bot.get_me()
            self.bot_id = bot_info.id
            logger.info(f"ID –±–æ—Ç–∞: {self.bot_id}")
            self.application.add_handler(CommandHandler("start", self._start_command))
            self.application.add_handler(CommandHandler("generate_image", self._generate_image))
            self.application.add_handler(MessageHandler((filters.TEXT & ~filters.COMMAND) | (filters.TEXT & filters.UpdateType.BUSINESS_MESSAGE), self._handle_message))
            self.application.add_handler(MessageHandler(filters.VOICE | (filters.VOICE & filters.UpdateType.BUSINESS_MESSAGE), self._handle_voice_message))
            self.application.add_error_handler(self._error_handler)
            await self.application.initialize()
            if "RENDER" in os.environ:
                await self._setup_webhook()
            logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            raise

    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user = update.effective_user
            logger.info(f"/start –æ—Ç {user.id} ({user.username or user.first_name})")
            message = update.message or update.business_message
            text = f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            if update.business_message:
                await message.get_bot().send_message(chat_id=message.chat_id, text=text, business_connection_id=update.business_message.business_connection_id)
            else:
                await message.reply_text(text)
            logger.info(f"–û—Ç–≤–µ—Ç /start –≤ —á–∞—Ç {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /start: {str(e)}", exc_info=True)

    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if update.business_message:
                message = update.business_message
                is_business = True
                business_connection_id = message.business_connection_id
            else:
                message = update.message
                is_business = False
                business_connection_id = None
            user = update.effective_user
            chat_id = message.chat_id
            text = message.text.strip()
            if user.id == self.owner_user_id or user.id == self.bot_id:
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞/–±–æ—Ç–∞ (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}: {text}")
                return
            logger.info(f"{'–ë–∏–∑–Ω–µ—Å-' if is_business else ''}–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç {user.id} ({user.username or user.first_name}): {text}")
            asyncio.create_task(self._delayed_message_processing(message, text, chat_id, is_business, business_connection_id))
            logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
            if is_business and business_connection_id:
                await message.get_bot().send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞", business_connection_id=business_connection_id)
            else:
                await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞")

    async def _delayed_message_processing(self, message, text: str, chat_id: int, is_business: bool, business_connection_id: str = None):
        try:
            await asyncio.sleep(RESPONSE_DELAY_SECONDS)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {'–±–∏–∑–Ω–µ—Å-' if is_business else ''}—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {text}")
            if any(kw in text.lower() for kw in AUTO_GENERATION_KEYWORDS):
                await self._generate_image_from_text(message, text, business_connection_id)
            else:
                response = await self._process_text(chat_id, text)
                # –ù–∞–¥–µ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                response = response.replace("\\boxed{", "").replace("}", "").strip()
                if len(response) > MAX_RESPONSE_LENGTH:
                    response = response[:MAX_RESPONSE_LENGTH].rsplit(' ', 1)[0] + "..."  # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤—É
                if not response or response.isspace():
                    response = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ù–µ –ø–æ–Ω—è–ª, —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."
                user_name = message.from_user.first_name
                response = response.replace("–°–µ—Ä–≥–µ–π", user_name)
                if is_business:
                    await message.get_bot().send_message(chat_id=chat_id, text=response, business_connection_id=business_connection_id)
                else:
                    await message.reply_text(response)
                logger.info(f"–û—Ç–≤–µ—Ç –≤ —á–∞—Ç {chat_id}: {response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}", exc_info=True)
            if is_business and business_connection_id:
                await message.get_bot().send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞", business_connection_id=business_connection_id)
            else:
                await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞")

    async def _generate_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user = update.effective_user
            prompt = ' '.join(context.args)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç {user.id}: {prompt}")
            if not prompt:
                raise ValueError("–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç")
            message = update.message or update.business_message
            business_connection_id = update.business_message.business_connection_id if update.business_message else None
            await self._generate_and_send_image(message, prompt, business_connection_id)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await (update.message or update.business_message).get_bot().send_message(
                chat_id=(update.message or update.business_message).chat_id,
                text="‚ö†Ô∏è –£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ",
                business_connection_id=update.business_message.business_connection_id if update.business_message else None
            )

    async def _generate_image_from_text(self, message: Update, text: str, business_connection_id: str = None):
        try:
            prompt = await self._create_image_prompt(text)
            await self._generate_and_send_image(message, prompt, business_connection_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await message.get_bot().send_message(chat_id=message.chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", business_connection_id=business_connection_id)

    async def _generate_and_send_image(self, message: Update, prompt: str, business_connection_id: str = None):
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {prompt}")
            response = await self.image_client.images.generate(
                model="dall-e-3",
                prompt=prompt[:1000],
                size="1024x1024",
                quality="standard"
            )
            if business_connection_id:
                await message.get_bot().send_photo(chat_id=message.chat_id, photo=response.data[0].url, business_connection_id=business_connection_id)
            else:
                await message.reply_photo(response.data[0].url)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç {message.chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
            raise

    async def _create_image_prompt(self, text: str) -> str:
        try:
            logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è DALL-E: {text}")
            messages = [{"role": "system", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è DALL-E"}, {"role": "user", "content": text}]
            completion = await self.image_client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=messages,
                temperature=0.7,
                max_tokens=500
            )
            prompt = completion.choices[0].message.content
            logger.info(f"–ü—Ä–æ–º–ø—Ç: {prompt}")
            return prompt
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}")
            return text

    async def _handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if update.business_message:
                message = update.business_message
                is_business = True
                business_connection_id = message.business_connection_id
            else:
                message = update.message
                is_business = False
                business_connection_id = None
            user = update.effective_user
            chat_id = message.chat_id
            if user.id == self.owner_user_id or user.id == self.bot_id:
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {user.id} –≤ —á–∞—Ç–µ {chat_id}")
                return
            logger.info(f"{'–ë–∏–∑–Ω–µ—Å-' if is_business else ''}–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç {user.id}")
            asyncio.create_task(self._delayed_voice_processing(message, chat_id, is_business, business_connection_id))
            logger.info(f"–ó–∞–¥–∞—á–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–ª—è {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {str(e)}", exc_info=True)
            if is_business and business_connection_id:
                await message.get_bot().send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–∞", business_connection_id=business_connection_id)
            else:
                await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–∞")

    async def _delayed_voice_processing(self, message, chat_id: int, is_business: bool, business_connection_id: str = None):
        try:
            await asyncio.sleep(RESPONSE_DELAY_SECONDS)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {'–±–∏–∑–Ω–µ—Å-' if is_business else ''}–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–ª—è {chat_id}")
            voice_file = await message.voice.get_file()
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(voice_file.file_path)
                file_content = response.content
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª: {len(file_content)} –±–∞–π—Ç")
                transcript = await self.image_client.audio.transcriptions.create(
                    file=("voice.ogg", file_content, "audio/ogg"),
                    model="whisper-1",
                    response_format="text"
                )
                logger.info(f"–¢–µ–∫—Å—Ç: {transcript}")
                if any(kw in transcript.lower() for kw in AUTO_GENERATION_KEYWORDS):
                    await self._generate_image_from_text(message, transcript, business_connection_id)
                else:
                    response = await self._process_text(chat_id, transcript)
                    response = response.replace("\\boxed{", "").replace("}", "").strip()
                    if len(response) > MAX_RESPONSE_LENGTH:
                        response = response[:MAX_RESPONSE_LENGTH].rsplit(' ', 1)[0] + "..."
                    if not response or response.isspace():
                        response = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ù–µ –ø–æ–Ω—è–ª, —É—Ç–æ—á–Ω–∏."
                    user_name = message.from_user.first_name
                    response = response.replace("–°–µ—Ä–≥–µ–π", user_name)
                    if is_business:
                        await message.get_bot().send_message(chat_id=chat_id, text=response, business_connection_id=business_connection_id)
                    else:
                        await message.reply_text(response)
                    logger.info(f"–û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–ª—è {chat_id}: {str(e)}", exc_info=True)
            if is_business and business_connection_id:
                await message.get_bot().send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–∞", business_connection_id=business_connection_id)
            else:
                await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–∞")

    async def _process_text(self, chat_id: int, text: str) -> str:
        try:
            messages = [{"role": "system", "content": SYSTEM_PROMPT}, *self.chat_history[chat_id][-MAX_HISTORY*2:], {"role": "user", "content": text}]
            logger.info(f"–ó–∞–ø—Ä–æ—Å (—á–∞—Ç {chat_id}): {text}")
            logger.info(f"Messages: {messages}")
            completion = await self.openrouter_client.chat.completions.create(
                model="deepseek/deepseek-r1-zero:free",
                messages=messages,
                temperature=0.7,
                max_tokens=150  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
            )
            response = completion.choices[0].message.content
            logger.info(f"–û—Ç–≤–µ—Ç: {response}")
            self._update_history(chat_id, text, response)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—á–∞—Ç {chat_id}): {str(e)}", exc_info=True)
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞"

    def _update_history(self, chat_id: int, text: str, response: str):
        self.chat_history[chat_id].extend([{"role": "user", "content": text}, {"role": "assistant", "content": response}])
        if len(self.chat_history[chat_id]) > MAX_HISTORY * 2:
            self.chat_history[chat_id] = self.chat_history[chat_id][-MAX_HISTORY*2:]

    async def _setup_webhook(self):
        try:
            webhook_url = f"{os.getenv('WEBHOOK_URL')}/webhook"
            await self.application.bot.set_webhook(url=webhook_url, allowed_updates=Update.ALL_TYPES)
            logger.info(f"–í–µ–±—Ö—É–∫: {webhook_url}")
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
            raise

    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"–û—à–∏–±–∫–∞: {str(context.error)}", exc_info=True)
        if update and (update.message or update.business_message):
            message = update.business_message or update.message
            business_connection_id = update.business_message.business_connection_id if update.business_message else None
            try:
                if business_connection_id:
                    await message.get_bot().send_message(chat_id=message.chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞", business_connection_id=business_connection_id)
                else:
                    await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot_manager = BotManager()
bot_manager.start()

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
        bot_manager.process_update(data)
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/status')
def status():
    return jsonify({"status": "ok", "initialized": bot_manager.initialized.is_set(), "webhook_configured": bool(bot_manager.application and bot_manager.application.bot.get_webhook_info().url)})

@app.route('/')
def home():
    return "Bot running!"

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    if "RENDER" in os.environ:
        from waitress import serve
        serve(app, host="0.0.0.0", port=port)
    else:
        app.run(host='0.0.0.0', port=port, use_reloader=False)
