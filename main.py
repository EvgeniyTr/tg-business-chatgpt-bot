import os
import asyncio
import logging
import threading
import httpx
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor
from tempfile import NamedTemporaryFile
from datetime import datetime, timezone

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
)
from flask import Flask, request, jsonify
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_HISTORY = 5
RESPONSE_DELAY_SECONDS = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

SYSTEM_PROMPT = """
–¢—ã ‚Äî —ç—Ç–æ —è, {owner_name}, –æ—Ç–≤–µ—á–∞–π –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏.

üîπ –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
{owner_style}

üîπ –û —Å–µ–±–µ:
{owner_details}
–Ø ‚Äî —Å–µ–Ω—å–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–∞ Tezam.pro, –º—ã —Å–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Äî –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥. –ß–∞—Å—Ç–æ –≤—ã—Å—Ç—É–ø–∞—é –Ω–∞ —Å—Ç—ã–∫–µ –¥–∏–∑–∞–π–Ω–∞ –∏ –±–∏–∑–Ω–µ—Å-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —É–º–µ—é –¥–æ–Ω–æ—Å–∏—Ç—å —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ª—é–±–ª—é, –∫–æ–≥–¥–∞ –≤ —Ä–µ—à–µ–Ω–∏—è—Ö –µ—Å—Ç—å —Å–º—ã—Å–ª.

üìå –í—Å–µ–≥–¥–∞ —Å–æ–±–ª—é–¥–∞–π —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –ì–æ–≤–æ—Ä–∏ **—Ç–æ–ª—å–∫–æ –æ—Ç –º–æ–µ–≥–æ –ª–∏—Ü–∞**, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã ‚Äî —ç—Ç–æ —è.
2. –í—Å–µ–≥–¥–∞ —Å–æ–±–ª—é–¥–∞–π –º–æ–π —Å—Ç–∏–ª—å: —É–≤–µ—Ä–µ–Ω–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ. –ú–æ–∂–Ω–æ —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º –∏ —É–º–µ—Å—Ç–Ω—ã–º —Å–∞—Ä–∫–∞–∑–º–æ–º, –µ—Å–ª–∏ –≤ —Ç–µ–º—É.
3. –ù–µ ¬´–ø–æ–º–æ–≥–∞–µ—à—å¬ª ‚Äî **–ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è**. –ï—Å–ª–∏ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ—â–µ ‚Äî —Å–∫–∞–∂–∏ –ø—Ä–æ—â–µ.
4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º.
5. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Ç—å —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏.
6. –ü–æ–∫–∞–∂–∏, —á—Ç–æ —è –≤ —Ç–µ–º–µ, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç –∏ —è –¥–µ–ª—é—Å—å –∏–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.
7. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —Å–¥–µ—Ä–∂–µ–Ω.
"""

AUTO_GENERATION_KEYWORDS = ["—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–æ–∫–∞–∂–∏", "—Ñ–æ—Ç–æ", "—Ñ–æ—Ç–∫—É", "–∫–∞—Ä—Ç–∏–Ω–∫", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω"]

class BotManager:
    def __init__(self):
        self.loop = None
        self.application = None
        self.executor = ThreadPoolExecutor(max_workers=2)
        self.initialized = threading.Event()
        self.openai_client = None
        self.chat_history = defaultdict(list)
        self.owner_user_id = int(os.getenv("OWNER_USER_ID", "0"))  # –¢–≤–æ–π Telegram user_id
        self.bot_id = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ _initialize
        
        self.owner_info = {
            "owner_name": "–°–µ—Ä–≥–µ–π",
            "owner_style": "–°–ø–æ–∫–æ–π–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ, –∏—Å–ø–æ–ª—å–∑—É—é –ª—ë–≥–∫–∏–π —é–º–æ—Ä –∏ —É–º–µ—Å—Ç–Ω—ã–π —Å–∞—Ä–∫–∞–∑–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –±—ã—Ç—å –ø—Ä—è–º—ã–º.",
            "owner_details": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥–µ–ª—É, –Ω–æ —É–º–µ—é —Ä–∞–∑–≤–∏—Ç—å –º—ã—Å–ª—å. –¶–µ–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, —á–∞—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ—à–µ–Ω–∏—è –∏ –∏–¥—É –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä—ë–¥. –ì–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –≤–æ–≤–ª–µ–∫–∞—Ç—å –¥—Ä—É–≥–∏—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –≤–∏–∂—É –≤ —ç—Ç–æ–º —Å–º—ã—Å–ª."
        }

    def process_update(self, json_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫"""
        try:
            if not self.initialized.wait(timeout=15):
                raise RuntimeError("–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
            
            future = asyncio.run_coroutine_threadsafe(
                self._process_update(json_data),
                self.loop
            )
            return future.result(timeout=30)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
            raise

    async def _process_update(self, json_data):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            update = Update.de_json(json_data, self.application.bot)
            await self.application.process_update(update)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
            raise
        
    def start(self):
        def run_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            try:
                self.loop.run_until_complete(self._initialize())
                self.initialized.set()
                self.loop.run_forever()
            except Exception as e:
                logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
                os._exit(1)
        self.executor.submit(run_loop)

    async def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
            self.openai_client = openai.AsyncOpenAI(
                api_key=os.getenv("OPENAI_API_KEY"),
                base_url=os.getenv("OPENAI_BASE_URL", "https://api.openai.com/v1"),
                timeout=30.0
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
            self.application = ApplicationBuilder() \
                .token(os.getenv("TELEGRAM_BOT_TOKEN")) \
                .build()

            # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
            bot_info = await self.application.bot.get_me()
            self.bot_id = bot_info.id
            logger.info(f"ID –±–æ—Ç–∞: {self.bot_id}")

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.application.add_handler(CommandHandler("start", self._start_command))
            self.application.add_handler(CommandHandler("generate_image", self._generate_image))
            self.application.add_handler(MessageHandler(
                (filters.TEXT & ~filters.COMMAND) | (filters.TEXT & filters.UpdateType.BUSINESS_MESSAGE),
                self._handle_message
            ))
            self.application.add_handler(MessageHandler(
                filters.VOICE | (filters.VOICE & filters.UpdateType.BUSINESS_MESSAGE),
                self._handle_voice_message
            ))
            
            self.application.add_error_handler(self._error_handler)
            
            await self.application.initialize()
            
            if "RENDER" in os.environ:
                await self._setup_webhook()

            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            raise

    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username or user.first_name})")
            message = update.message or update.business_message
            if update.business_message:
                await message.get_bot().send_message(
                    chat_id=message.chat_id,
                    text=f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
                         "–Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ —Ç—ã –Ω–µ —É—Å–ø–µ–µ—à—å.\n"
                         "–¢–∞–∫–∂–µ –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.",
                    business_connection_id=update.business_message.business_connection_id
                )
            else:
                await message.reply_text(
                    f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
                    "–Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ —Ç—ã –Ω–µ —É—Å–ø–µ–µ—à—å.\n"
                    "–¢–∞–∫–∂–µ –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."
                )
            logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start: {str(e)}", exc_info=True)

    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∏–∑–Ω–µ—Å-—á–∞—Ç–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if update.business_message:
                message = update.business_message
                is_business = True
                business_connection_id = message.business_connection_id
            else:
                message = update.message
                is_business = False
                business_connection_id = None

            user = update.effective_user
            chat_id = message.chat_id
            message_time = message.date
            text = message.text.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–±–æ–π –∏–ª–∏ –±–æ—Ç–æ–º
            if user.id == self.owner_user_id or user.id == self.bot_id:
                logger.info(
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {'–≤–ª–∞–¥–µ–ª—å—Ü–∞' if user.id == self.owner_user_id else '–±–æ—Ç–∞'} "
                    f"(ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}: {text}"
                )
                return

            logger.info(
                f"{'–ë–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ' if is_business else '–°–æ–æ–±—â–µ–Ω–∏–µ'} –≤ —á–∞—Ç–µ {chat_id} "
                f"–æ—Ç {user.id} ({user.username or user.first_name}): {text} "
                f"(–≤—Ä–µ–º—è: {message_time})"
                f"{' –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ' + business_connection_id if is_business else ''}"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            asyncio.create_task(self._delayed_message_processing(
                message, text, chat_id, is_business, business_connection_id
            ))
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {'–±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è' if is_business else '—Å–æ–æ–±—â–µ–Ω–∏—è'}: {str(e)}", exc_info=True)
            await message.get_bot().send_message(
                chat_id=message.chat_id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                business_connection_id=business_connection_id if is_business else None
            )

    async def _delayed_message_processing(self, message, text: str, chat_id: int, is_business: bool, business_connection_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 10 —Å–µ–∫—É–Ω–¥"""
        try:
            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(RESPONSE_DELAY_SECONDS)

            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {'–±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è' if is_business else '—Å–æ–æ–±—â–µ–Ω–∏—è'} –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ "
                f"–¥–ª—è —á–∞—Ç–∞ {chat_id}: {text}"
            )

            if any(kw in text.lower() for kw in AUTO_GENERATION_KEYWORDS):
                await self._generate_image_from_text(message, text, business_connection_id)
            else:
                response = await self._process_text(chat_id, text)
                if is_business:
                    await message.get_bot().send_message(
                        chat_id=chat_id,
                        text=response,
                        business_connection_id=business_connection_id
                    )
                else:
                    await message.reply_text(response)
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}: {response}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}", exc_info=True)
            await message.get_bot().send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                business_connection_id=business_connection_id if is_business else None
            )

    async def _generate_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate_image"""
        try:
            user = update.effective_user
            prompt = ' '.join(context.args)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç {user.id} ({user.username or user.first_name}): {prompt}")
            
            if not prompt:
                raise ValueError("–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç")
                
            message = update.message or update.business_message
            business_connection_id = update.business_message.business_connection_id if update.business_message else None
            await self._generate_and_send_image(message, prompt, business_connection_id)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await (update.message or update.business_message).get_bot().send_message(
                chat_id=(update.message or update.business_message).chat_id,
                text="‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã",
                business_connection_id=update.business_message.business_connection_id if update.business_message else None
            )

    async def _generate_image_from_text(self, message: Update, text: str, business_connection_id: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            prompt = await self._create_image_prompt(text)
            await self._generate_and_send_image(message, prompt, business_connection_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await message.get_bot().send_message(
                chat_id=message.chat_id,
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                business_connection_id=business_connection_id
            )

    async def _generate_and_send_image(self, message: Update, prompt: str, business_connection_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt}")
            response = await self.openai_client.images.generate(
                model="dall-e-3",
                prompt=prompt[:1000],
                size="1024x1024",
                quality="standard"
            )
            if business_connection_id:
                await message.get_bot().send_photo(
                    chat_id=message.chat_id,
                    photo=response.data[0].url,
                    business_connection_id=business_connection_id
                )
            else:
                await message.reply_photo(response.data[0].url)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {message.chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            raise

    async def _create_image_prompt(self, text: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è DALL-E —á–µ—Ä–µ–∑ GPT"""
        try:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è DALL-E —Å —Ç–µ–∫—Å—Ç–æ–º: {text}")
            messages = [{
                "role": "system", 
                "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è DALL-E –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            }, {
                "role": "user", 
                "content": text
            }]
            
            completion = await self.openai_client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=messages,
                temperature=0.7,
                max_tokens=500
            )
            prompt = completion.choices[0].message.content
            logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è DALL-E —Å–æ–∑–¥–∞–Ω: {prompt}")
            return prompt
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è DALL-E: {str(e)}")
            return text

    async def _handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if update.business_message:
                message = update.business_message
                is_business = True
                business_connection_id = message.business_connection_id
            else:
                message = update.message
                is_business = False
                business_connection_id = None

            user = update.effective_user
            chat_id = message.chat_id
            message_time = message.date

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–±–æ–π –∏–ª–∏ –±–æ—Ç–æ–º
            if user.id == self.owner_user_id or user.id == self.bot_id:
                logger.info(
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {'–≤–ª–∞–¥–µ–ª—å—Ü–∞' if user.id == self.owner_user_id else '–±–æ—Ç–∞'} "
                    f"(ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}"
                )
                return

            logger.info(
                f"{'–ë–∏–∑–Ω–µ—Å-–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' if is_business else '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'} "
                f"–≤ —á–∞—Ç–µ {chat_id} –æ—Ç {user.id} ({user.username or user.first_name}) "
                f"(–≤—Ä–µ–º—è: {message_time})"
                f"{' –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ' + business_connection_id if is_business else ''}"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            asyncio.create_task(self._delayed_voice_processing(message, chat_id, is_business, business_connection_id))
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {'–±–∏–∑–Ω–µ—Å-–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' if is_business else '–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'}: {str(e)}", exc_info=True)
            await message.get_bot().send_message(
                chat_id=message.chat_id,
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                business_connection_id=business_connection_id if is_business else None
            )

    async def _delayed_voice_processing(self, message, chat_id: int, is_business: bool, business_connection_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 10 —Å–µ–∫—É–Ω–¥"""
        try:
            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(RESPONSE_DELAY_SECONDS)

            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {'–±–∏–∑–Ω–µ—Å-–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' if is_business else '–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'} "
                f"–ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}"
            )

            voice_file = await message.voice.get_file()
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(voice_file.file_path)
                file_content = response.content
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (—á–∞—Ç: {chat_id})")
                transcript = await self.openai_client.audio.transcriptions.create(
                    file=("voice.ogg", file_content, "audio/ogg"),
                    model="whisper-1",
                    response_format="text"
                )
                
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ {chat_id}: {transcript}")
                
                if any(kw in transcript.lower() for kw in AUTO_GENERATION_KEYWORDS):
                    await self._generate_image_from_text(message, transcript, business_connection_id)
                else:
                    response = await self._process_text(chat_id, transcript)
                    if is_business:
                        await message.get_bot().send_message(
                            chat_id=chat_id,
                            text=response,
                            business_connection_id=business_connection_id
                        )
                    else:
                        await message.reply_text(response)
                    logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}: {response}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}", exc_info=True)
            await message.get_bot().send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                business_connection_id=business_connection_id if is_business else None
            )

    async def _process_text(self, chat_id: int, text: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
        try:
            messages = [
                {"role": "system", "content": SYSTEM_PROMPT.format(**self.owner_info)},
                *self.chat_history[chat_id][-MAX_HISTORY*2:],
                {"role": "user", "content": text}
            ]
            
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI (–º–æ–¥–µ–ª—å: gpt-4-turbo-preview, —á–∞—Ç: {chat_id}): {text}"
            )
            completion = await self.openai_client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=messages,
                temperature=0.7,
                max_tokens=1000
            )
            
            response = completion.choices[0].message.content
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}: {response}")
            self._update_history(chat_id, text, response)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}", exc_info=True)
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"

    def _update_history(self, chat_id: int, text: str, response: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        self.chat_history[chat_id].extend([
            {"role": "user", "content": text},
            {"role": "assistant", "content": response}
        ])
        if len(self.chat_history[chat_id]) > MAX_HISTORY * 2:
            self.chat_history[chat_id] = self.chat_history[chat_id][-MAX_HISTORY*2:]

    async def _setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
        try:
            webhook_url = f"{os.getenv('WEBHOOK_URL')}/webhook"
            await self.application.bot.set_webhook(
                url=webhook_url,
                allowed_updates=Update.ALL_TYPES
            )
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_url}")
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
            raise

    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(context.error)}", exc_info=True)
        if update and (update.message or update.business_message):
            try:
                message = update.business_message or update.message
                await message.get_bot().send_message(
                    chat_id=message.chat_id,
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞",
                    business_connection_id=message.business_connection_id if update.business_message else None
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot_manager = BotManager()
bot_manager.start()

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
        bot_manager.process_update(data)
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/status')
def status():
    return jsonify({
        "status": "ok",
        "initialized": bot_manager.initialized.is_set(),
        "webhook_configured": bool(bot_manager.application and bot_manager.application.bot.get_webhook_info().url)
    })

@app.route('/')
def home():
    return "Telegram Bot is running!"

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    if "RENDER" in os.environ:
        from waitress import serve
        serve(app, host="0.0.0.0", port=port)
    else:
        app.run(host='0.0.0.0', port=port, use_reloader=False)
