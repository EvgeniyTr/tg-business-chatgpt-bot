import os
import asyncio
import logging
import threading
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
import pytz

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from openai import AsyncOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_HISTORY = 3
DELAY_MINUTES = 1
SYSTEM_PROMPT = """
–¢—ã - —ç—Ç–æ —è, {owner_name}. –û—Ç–≤–µ—á–∞–π –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.
–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- {owner_style}
- {owner_details}

–í—Å–µ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª:
1. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç –º–æ–µ–≥–æ –ª–∏—Ü–∞
2. –°–æ—Ö—Ä–∞–Ω—è–π –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
3. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
"""
AUTO_GENERATION_KEYWORDS = ["—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–æ–∫–∞–∂–∏", "—Ñ–æ—Ç–æ", "—Ñ–æ—Ç–∫—É", "–∫–∞—Ä—Ç–∏–Ω–∫", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω"]

class BotManager:
    def __init__(self):
        self.loop = None
        self.dispatcher = None
        self.executor = ThreadPoolExecutor(max_workers=2)
        self.initialized = threading.Event()
        self.openai_client = None
        self.chat_history = defaultdict(list)
        self.bot = None

        self.owner_info = {
            "owner_name": "–°–µ—Ä–≥–µ–π",
            "owner_style": "–°–ø–æ–∫–æ–π–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ, –∏—Å–ø–æ–ª—å–∑—É—é –ª—ë–≥–∫–∏–π —é–º–æ—Ä –∏ —É–º–µ—Å—Ç–Ω—ã–π —Å–∞—Ä–∫–∞–∑–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –±—ã—Ç—å –ø—Ä—è–º—ã–º.",
            "owner_details": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥–µ–ª—É, –Ω–æ —É–º–µ—é —Ä–∞–∑–≤–∏—Ç—å –º—ã—Å–ª—å. –¶–µ–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, —á–∞—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ—à–µ–Ω–∏—è –∏ –∏–¥—É –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä—ë–¥. –ì–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –≤–æ–≤–ª–µ–∫–∞—Ç—å –¥—Ä—É–≥–∏—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –≤–∏–∂—É –≤ —ç—Ç–æ–º —Å–º—ã—Å–ª."
        }

    def run(self):
        def run_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            try:
                self.loop.run_until_complete(self._init_bot())
                self.initialized.set()
                self.loop.run_forever()
            except Exception as e:
                logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
                os._exit(1)

        self.executor.submit(run_loop)

    async def _init_bot(self):
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI...")
        self.openai_client = AsyncOpenAI(
            api_key=os.getenv("OPENAI_API_KEY"),
            base_url="https://api.openai.com/v1"
        )

        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram Bot...")
        self.bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"), parse_mode=ParseMode.HTML)
        self.dispatcher = Dispatcher(storage=MemoryStorage())

        self.dispatcher.message.register(self.handle_message, F.text)

        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
        if os.getenv("RENDER"):
            await self.bot.set_webhook(f"{os.getenv('WEBHOOK_URL')}/webhook")

    async def handle_message(self, message: Message):
        user_id = message.from_user.id
        text = message.text.strip()

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

        if not await self._check_delay(user_id):
            return

        if not await self._check_working_hours():
            await message.answer("‚è∞ –°–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00‚Äì18:00 –ú–°–ö)")
            return

        if any(kw in text.lower() for kw in AUTO_GENERATION_KEYWORDS):
            await message.answer("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        response = await self._generate_response(user_id, text)
        await message.answer(response + "\n\n_–û—Ç–≤–µ—Ç –æ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞_", parse_mode=ParseMode.MARKDOWN)

    async def _generate_response(self, user_id: int, user_message: str) -> str:
        history = self.chat_history[user_id][-MAX_HISTORY:]

        messages = [
            {"role": "system", "content": SYSTEM_PROMPT.format(**self.owner_info)}
        ] + history + [
            {"role": "user", "content": user_message}
        ]

        try:
            completion = await self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                temperature=0.7
            )
            reply = completion.choices[0].message.content
            self._update_history(user_id, user_message, reply)
            return reply
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"

    def _update_history(self, user_id: int, user_text: str, bot_reply: str):
        self.chat_history[user_id].extend([
            {"role": "user", "content": user_text},
            {"role": "assistant", "content": bot_reply}
        ])
        self.chat_history[user_id] = self.chat_history[user_id][-MAX_HISTORY * 2:]

    async def _check_working_hours(self):
        tz = pytz.timezone("Europe/Moscow")
        now = datetime.now(tz)
        return now.weekday() < 5 and 9 <= now.hour < 18

    async def _check_delay(self, user_id: int):
        return True

bot_manager = BotManager()
bot_manager.run()

# Aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook
async def webhook_handler(request):
    try:
        data = await request.json()
        await bot_manager.dispatcher.feed_raw_update(data)
        return web.Response(text="ok")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}", exc_info=True)
        return web.Response(status=500)

async def init_app():
    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)
    setup_application(app, bot_manager.dispatcher, bot=bot_manager.bot)
    return app

if __name__ == '__main__':
    import sys
    if os.getenv("RENDER"):
        from waitress import serve
        web.run_app(init_app(), port=int(os.getenv("PORT", 10000)))
    else:
        web.run_app(init_app(), port=int(os.getenv("PORT", 5000)))
