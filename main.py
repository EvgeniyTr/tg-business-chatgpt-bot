import os
import asyncio
import logging
import threading
import json
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor
from tempfile import NamedTemporaryFile
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler
from flask import Flask, request, jsonify
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_HISTORY = 3
SYSTEM_PROMPT = """
–¢—ã - —ç—Ç–æ —è, {owner_name}. –û—Ç–≤–µ—á–∞–π –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.
–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- {owner_style}
- {owner_details}

–í—Å–µ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª:
1. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç –º–æ–µ–≥–æ –ª–∏—Ü–∞ —Å –ø–æ–¥–ø–∏—Å—å—é, —è AI –∞—Å–∏—Å—Ç–µ–Ω—Ç
2. –°–æ—Ö—Ä–∞–Ω—è–π –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
3. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
"""
AUTO_GENERATION_KEYWORDS = ["—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–æ–∫–∞–∂–∏", "—Ñ–æ—Ç–æ", "—Ñ–æ—Ç–∫—É", "–∫–∞—Ä—Ç–∏–Ω–∫", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω"]

class BotManager:
    def __init__(self):
        self.loop = None
        self.application = None
        self.executor = ThreadPoolExecutor(max_workers=1)
        self.initialized = threading.Event()
        self.openai_client = None
        self.chat_history = defaultdict(list)
        self.init_timeout = 120
        self.start_time = None
        
        self.owner_info = {
            "owner_name": "–°–µ—Ä–≥–µ–π",
            "owner_style": "–°–ø–æ–∫–æ–π–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ, –∏—Å–ø–æ–ª—å–∑—É—é –ª—ë–≥–∫–∏–π —é–º–æ—Ä –∏ —É–º–µ—Å—Ç–Ω—ã–π —Å–∞—Ä–∫–∞–∑–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –±—ã—Ç—å –ø—Ä—è–º—ã–º.",
            "owner_details": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥–µ–ª—É, –Ω–æ —É–º–µ—é —Ä–∞–∑–≤–∏—Ç—å –º—ã—Å–ª—å. –¶–µ–Ω—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, —á–∞—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ—à–µ–Ω–∏—è –∏ –∏–¥—É –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä—ë–¥. –ì–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –≤–æ–≤–ª–µ–∫–∞—Ç—å –¥—Ä—É–≥–∏—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –≤–∏–∂—É –≤ —ç—Ç–æ–º —Å–º—ã—Å–ª."
        }

    def start(self):
        def run_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            try:
                self.loop.run_until_complete(self._initialize())
                self.initialized.set()
                self.loop.run_forever()
            except Exception as e:
                logger.critical(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
                os._exit(1)

        self.executor.submit(run_loop)

    async def _initialize(self):
        self.openai_client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        self.application = ApplicationBuilder() \
            .token(os.getenv("TELEGRAM_BOT_TOKEN")) \
            .build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("generate_image", self._generate_image))
        self.application.add_handler(MessageHandler(filters.VOICE, self._handle_voice))
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self._handle_text
        ))
        self.application.add_handler(MessageHandler(
            self._business_message_filter(),
            self._handle_business_text
        ))
        self.application.add_error_handler(self._error_handler)
        
        await self.application.initialize()
        
        if "RENDER" in os.environ:
            await self._setup_webhook()

    def _business_message_filter(self):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π"""
        return (
            filters.UpdateType.MESSAGE &
            filters.Message(filters.TEXT) &
            filters.Lambda(lambda upd: bool(upd.message.business_connection_id)
        ))

    async def _log_incoming_message(self, update: Update):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_data = {
                "update_id": update.update_id,
                "message_id": update.message.message_id if update.message else None,
                "date": update.message.date.isoformat() if update.message and update.message.date else None,
                "chat_type": "business" if update.message and update.message.business_connection_id else "regular",
                "chat_id": update.effective_chat.id if update.effective_chat else None,
                "user_id": update.effective_user.id if update.effective_user else None,
                "content_type": "voice" if update.message and update.message.voice else "text",
                "content": update.message.text if update.message else "<unknown>"
            }
            logger.info("INCOMING MESSAGE: %s", json.dumps(message_data, ensure_ascii=False))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)

    async def _handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._process_common_message(update, context, is_business=False)

    async def _handle_business_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._process_common_message(update, context, is_business=True)

    async def _process_common_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_business: bool):
        try:
            await self._log_incoming_message(update)
            
            if not update.message or not update.message.text:
                return

            user_id = update.effective_user.id
            text = update.message.text.strip()
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {'–±–∏–∑–Ω–µ—Å-' if is_business else ''}—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {text}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if any(kw in text.lower() for kw in AUTO_GENERATION_KEYWORDS):
                prompt = text + " –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
                await self._generate_image_from_text(update, prompt)
                return

            # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
            response = await self._process_text(user_id, text)
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
            if update.message:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def _generate_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            await self._log_incoming_message(update)
            
            if not context.args:
                await update.message.reply_text("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /generate_image <–æ–ø–∏—Å–∞–Ω–∏–µ>")
                return
                
            prompt = ' '.join(context.args)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            response = await self.openai_client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                size="1024x1024",
                quality="standard",
                n=1,
            )
            image_url = response.data[0].url
            await update.message.reply_photo(image_url)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {image_url}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    async def _generate_image_from_text(self, update: Update, prompt: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        try:
            context = ContextTypes.DEFAULT_TYPE(application=self.application, update=update)
            context.args = prompt.split()
            await self._generate_image(update, context)
        except Exception as e:
            logger.error(f"Auto-generation error: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")

    async def _handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            await self._log_incoming_message(update)
            
            if not update.message.voice:
                return

            logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            voice_file = await update.message.voice.get_file()
            
            with NamedTemporaryFile(delete=True, suffix=".ogg") as temp_file:
                await voice_file.download_to_drive(temp_file.name)
                
                transcript = await self.openai_client.audio.transcriptions.create(
                    file=open(temp_file.name, "rb"),
                    model="whisper-1",
                    response_format="text"
                )
                logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcript}")
                
                if any(kw in transcript.lower() for kw in AUTO_GENERATION_KEYWORDS):
                    await self._generate_image_from_text(update, transcript)
                else:
                    response = await self._process_text(update.effective_user.id, transcript)
                    await update.message.reply_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcript}\n\nüìù –û—Ç–≤–µ—Ç: {response}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞")

    async def _process_text(self, user_id: int, text: str) -> str:
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT.format(**self.owner_info)},
            *self.chat_history[user_id][-MAX_HISTORY:],
            {"role": "user", "content": text}
        ]
        
        logger.debug(f"GPT –∑–∞–ø—Ä–æ—Å: {json.dumps(messages, ensure_ascii=False)}")
        
        completion = await self.openai_client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=messages,
            temperature=0.7
        )
        
        response = completion.choices[0].message.content
        self._update_history(user_id, text, response)
        logger.debug(f"GPT –æ—Ç–≤–µ—Ç: {response[:100]}...")
        return response

    def _update_history(self, user_id: int, text: str, response: str):
        self.chat_history[user_id].extend([
            {"role": "user", "content": text},
            {"role": "assistant", "content": response}
        ])
        if len(self.chat_history[user_id]) > MAX_HISTORY * 2:
            self.chat_history[user_id] = self.chat_history[user_id][-MAX_HISTORY * 2:]
        logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def _setup_webhook(self):
        webhook_url = os.getenv("WEBHOOK_URL") + '/webhook'
        await self.application.bot.set_webhook(
            url=webhook_url,
            max_connections=50,
            allowed_updates=["message", "voice", "business_message"]
        )
        logger.info(f"–í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_url}")

    def process_update(self, json_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json.dumps(json_data, indent=2)}")
        
        if not self.initialized.wait(timeout=self.init_timeout):
            raise RuntimeError(f"–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ({self.init_timeout} —Å–µ–∫)")
        
        future = asyncio.run_coroutine_threadsafe(
            self._process_update(json_data),
            self.loop
        )
        return future.result(timeout=30)

    async def _process_update(self, json_data):
        try:
            logger.debug("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            update = Update.de_json(json_data, self.application.bot)
            await self.application.process_update(update)
            logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)

    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)
        if update and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot_manager = BotManager()
bot_manager.start()

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("–í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ –∑–∞–ø—Ä–æ—Å. –ó–∞–≥–æ–ª–æ–≤–∫–∏: %s", request.headers)
        bot_manager.process_update(request.get_json())
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}", exc_info=True)
        return jsonify({"status": "error"}), 500

@app.route('/')
def home():
    return "Telegram Bot is running!"

if __name__ == '__main__':
    if "RENDER" in os.environ:
        from waitress import serve
        serve(app, host="0.0.0.0", port=10000)
    else:
        app.run(host='0.0.0.0', port=5000)
