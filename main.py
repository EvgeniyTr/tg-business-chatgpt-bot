import os
import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from openai import AsyncOpenAI
from pydantic_settings import BaseSettings
from redis.asyncio import Redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
class Settings(BaseSettings):
    TELEGRAM_BOT_TOKEN: str
    OPENAI_API_KEY: str
    WEBHOOK_URL: str
    ADMIN_ID: int
    REDIS_HOST: str = "localhost"
    DELAY_MINUTES: int = 10

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"

settings = Settings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
redis = Redis(host=settings.REDIS_HOST)
openai_client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã - —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –°–µ—Ä–≥–µ—è. –û—Ç–≤–µ—á–∞–π –æ—Ç –µ–≥–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –°–ø–æ–∫–æ–π–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π –ª–µ–≥–∫–∏–π —é–º–æ—Ä –∏ —Å–∞—Ä–∫–∞–∑–º –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –∏ –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
"""

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
class ThrottlingMiddleware:
    async def __call__(self, handler, event: Message, data):
        user_id = event.from_user.id
        
        last_message = await redis.get(f"user:{user_id}")
        if last_message:
            last_time = datetime.fromisoformat(last_message.decode())
            if (datetime.now() - last_time).seconds < settings.DELAY_MINUTES * 60:
                await event.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
                return

        await redis.set(f"user:{user_id}", datetime.now().isoformat())
        return await handler(event, data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –°–µ—Ä–≥–µ—è. "
        "–ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É."
    )

@dp.message(Command("generate_image"))
async def generate_image(message: Message):
    prompt = message.text.replace("/generate_image", "").strip()
    if not prompt:
        return await message.answer("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    try:
        response = await openai_client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard"
        )
        await message.answer_photo(response.data[0].url)
    except Exception as e:
        logger.error(f"Image generation error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@dp.message()
async def message_handler(message: Message):
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": message.text}
        ]
        
        completion = await openai_client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            temperature=0.7
        )
        
        await message.answer(completion.choices[0].message.content)
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# –í–µ–±—Ö—É–∫ –¥–ª—è Render
async def on_startup():
    await bot.set_webhook(
        url=f"{settings.WEBHOOK_URL}/webhook",
        drop_pending_updates=True
    )
    logger.info("Bot started")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask
from flask import Flask, request

app = Flask(__name__)

@app.post("/webhook")
async def webhook():
    try:
        update = types.Update(**request.json)
        await dp.feed_webhook_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error"}, 500

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.update.middleware(ThrottlingMiddleware())
    
    if "RENDER" in os.environ:
        from waitress import serve
        serve(app, host="0.0.0.0", port=10000)
    else:
        app.run(host="0.0.0.0", port=10000)
